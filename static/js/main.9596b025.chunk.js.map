{"version":3,"sources":["components/AddButton/AddButton.js","helpers/api.js","components/List/List.js","components/Sidebar/SidebarList.js","components/AppContent/TitleBlock.js","components/AppContent/TextBlock.js","App.js","index.js"],"names":["Add__button","onAdd","useState","visiblePopup","setVisiblePopup","isLoading","setIsLoading","inputValue","setInputValue","onClose","className","onClick","value","onChange","e","target","type","placeholder","axios","post","name","time","moment","format","postNewAnnouncement","then","data","listObj","names","catch","alert","finally","List","isRemovable","onRemoveList","items","onClickItem","activeItem","removeList","id","window","confirm","delete","deleteAnnouncements","map","item","index","key","classNames","active","_id","Sidebar__list","lists","setLists","htmlFor","newLists","filter","AddButton","obj","newList","TitleBlock","list","onEditTitle","ChosenId","newName","newTitle","prompt","put","TextBlock","isInEditMode","setInEditMode","theInputText","useRef","updatingText","newText","text","defaultValue","ref","onDoubleClick","App","useEffect","get","setActiveItem","title","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9596b025.chunk.js","sourcesContent":["import React, { useState, Fragment } from \"react\";\r\nimport { postNewAnnouncement } from \"../../helpers/api\"\r\nimport \"./AddButtonStyle.css\";\r\n\r\nconst Add__button = (onAdd) => {\r\n  const [visiblePopup, setVisiblePopup] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n  const onClose = () => {\r\n    setVisiblePopup(!setInputValue);\r\n    setInputValue(\"\");\r\n  };\r\n  const addList = () => {\r\n    if (!inputValue) {\r\n      alert(\"Enter name for new annoucements\");\r\n      return;\r\n    }\r\n    setIsLoading(true);\r\n      postNewAnnouncement(inputValue).then(({ data }) => {\r\n        const listObj = { ...data, names: [] };\r\n        onAdd(listObj);\r\n      })\r\n      .catch(() => {\r\n        alert(\"ohhh man, we have update-list ^-^\");\r\n      })\r\n      .finally(() => {\r\n        setIsLoading(false);\r\n        onClose();\r\n      });\r\n  };\r\n  return (\r\n    <Fragment>\r\n      <button\r\n        className=\"button create-new__button\"\r\n        onClick={() => setVisiblePopup(!visiblePopup)}\r\n      >\r\n        Create new announcements\r\n      </button>\r\n      {visiblePopup && (\r\n        <div className=\"add__list__popup\">\r\n          <button\r\n            onClick={() => onClose()}\r\n            className=\"add-list__popup-close-btn\"\r\n          ><i className=\"fa fa-close icon\"></i></button>\r\n          <input\r\n            value={inputValue}\r\n            onChange={(e) => setInputValue(e.target.value)}\r\n            type=\"text\"\r\n            placeholder=\"Enter new announcements name:\"\r\n            className=\"create__holder holder\"\r\n          ></input>\r\n          <button className=\"button add-new__btn\" onClick={addList}>\r\n            {isLoading ? \"Updating...\" : \"Submit\"}\r\n          </button>\r\n        </div>\r\n      )}\r\n    </Fragment>\r\n  );\r\n};\r\nexport default Add__button;\r\n","import axios from \"axios\";\r\nimport moment from \"moment\";\r\n\r\nexport const getList = () => {\r\n  return axios.get(\"https://secure-wave-34428.herokuapp.com/\");\r\n};\r\n\r\nexport const postNewAnnouncement = (inputValue) => {\r\n  return axios.post(\"https://secure-wave-34428.herokuapp.com/\", {\r\n    name: inputValue,\r\n    time: moment().format(\"MMMM Do YYYY, h:mm:ss a\"),\r\n  });\r\n};\r\n\r\nexport const deleteAnnouncements = (id) => {\r\n  return axios.delete(`https://secure-wave-34428.herokuapp.com/${id}`);\r\n};\r\n\r\nexport const changeNameOfAnnouncement = (id, newName) => {\r\n  return axios.put(`https://secure-wave-34428.herokuapp.com/${id}`, {\r\n    name: newName,\r\n    time: moment().format(\"MMMM Do YYYY, h:mm:ss a\"),\r\n  });\r\n};\r\n\r\nexport const changeTextOfAnnouncement = (id, newText) => {\r\n    axios.put(`https://secure-wave-34428.herokuapp.com/${id}/change__post`, {\r\n        text: newText, \r\n        time: moment().format(\"MMM Do YY\"),\r\n    })\r\n};","import React, { Fragment } from \"react\";\r\nimport classNames from \"classnames\";\r\nimport { deleteAnnouncements } from \"../../helpers/api\";\r\n\r\nimport \"./list.css\";\r\n\r\nconst List = ({ isRemovable, onRemoveList, items, onClickItem, activeItem }) => {\r\n  const removeList = (id) => {\r\n    if (window.confirm(\"You really want to remove this announcements?\")) {\r\n      deleteAnnouncements(id).then(() => {\r\n        onRemoveList(id);\r\n      });\r\n    }\r\n  };\r\n  return (\r\n    <Fragment>\r\n      {items.map((item, index) => (\r\n        <li\r\n          key={index}\r\n          className={classNames(item.className, { active: activeItem && activeItem.id === item.id })}\r\n          onClick = {onClickItem ? () => onClickItem(item) : null}\r\n        >\r\n          <span>{item.name}</span>\r\n          {isRemovable && (\r\n            <button\r\n              onClick={() => removeList(item._id)}\r\n              className=\"list__remove-btn\"\r\n            >\r\n              <i className=\"fa fa-close icon\"></i>\r\n            </button>\r\n          )}\r\n        </li>\r\n      ))}\r\n    </Fragment>\r\n  );\r\n};\r\nexport default List;\r\n","import React from \"react\";\r\n\r\nimport \"./SidebarList.css\";\r\nimport AddButton from \"../AddButton/AddButton\";\r\nimport List from \"../List/List.js\";\r\n\r\nconst Sidebar__list = ({lists, setLists, onClickItem, activeItem}) => {\r\n  const onAddList = (obj) => {\r\n    const newList = [...lists, obj];\r\n    setLists(newList);\r\n  };\r\n  return (\r\n    <div>\r\n      <ul className=\"sidebar__list\">\r\n        <li>\r\n          <label htmlFor=\"search__holder\">\r\n            <i className=\"fa fa-search icon\"></i>\r\n          </label>\r\n          <input\r\n            //  onChange={(e) => setSearchQuery(e.target.value)}\r\n            //  value={searchQuery}\r\n            placeholder=\"Search\"\r\n            id=\"search__holder\"\r\n            className=\"holder\"\r\n          />\r\n        </li>\r\n        {lists ? (\r\n          <List\r\n            onRemoveList={(id) => {\r\n              const newLists = lists.filter((item) => item.id !== id);\r\n              setLists(newLists);\r\n            }}\r\n            items={lists}\r\n            onClickItem={onClickItem}\r\n            activeItem = {activeItem}\r\n            isRemovable\r\n          />\r\n        ) : (\r\n          \"...Loading\"\r\n        )}\r\n      </ul>\r\n      <AddButton onAdd={onAddList}/>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Sidebar__list;\r\n","import React from \"react\";\r\nimport { changeNameOfAnnouncement } from \"../../helpers/api\"\r\n\r\nimport \"./TitleBlock.css\";\r\n\r\nconst TitleBlock = ({ list, onEditTitle }) => {\r\n  const ChosenId = list._id;\r\n  const editTitle = () => {\r\n    const newTitle = window.prompt(\r\n      \"New title of announcement:\",\r\n      list.name\r\n    );\r\n    if (newTitle) {\r\n      onEditTitle(ChosenId, newTitle);\r\n      changeNameOfAnnouncement(ChosenId, newTitle).catch(() => alert(`We can't change this title`));}\r\n  };\r\n  return (\r\n    <div className=\"app__title\">\r\n      <h2 className=\"announcements__title\">\r\n        {list.name}\r\n        <span onClick={editTitle} className=\"edit_btn\">\r\n          <i className=\"fa fa-edit icon\"></i>\r\n        </span>\r\n      </h2>\r\n    </div>\r\n  );\r\n};\r\nexport default TitleBlock;\r\n","import React, { useState, useRef } from \"react\";\r\nimport { changeTextOfAnnouncement } from \"../../helpers/api\";\r\nimport \"./TextBlock.css\";\r\n\r\nconst TextBlock = ({ list }) => {\r\n  const [isInEditMode, setInEditMode] = useState(true);\r\n  const ChosenId = list._id;\r\n  const theInputText = useRef();\r\n\r\n  const renderEditView = () => {\r\n    return (\r\n      <div className=\"announcements__text\">\r\n        <input defaultValue={list.post} ref={theInputText}></input>\r\n        <button className=\"update__text\" onClick={() => updatingText()}>\r\n          <i className=\"fa fa-save icon\"></i>\r\n        </button>\r\n        <button\r\n          className=\"close__texteditor\"\r\n          onClick={() => setInEditMode(!isInEditMode)}\r\n        >\r\n          <i className=\"fa fa-close icon\"></i>\r\n        </button>\r\n      </div>\r\n    );\r\n  };\r\n  const renderDefaultView = () => {\r\n    return (\r\n      <div\r\n        onDoubleClick={() => setInEditMode(!isInEditMode)}\r\n        className=\"announcements__text\"\r\n      >\r\n        {list.post}\r\n      </div>\r\n    );\r\n  };\r\n  const updatingText = () => {\r\n    setInEditMode(!isInEditMode);\r\n    changeTextOfAnnouncement(ChosenId, theInputText).catch(() =>\r\n      alert(`We can't change this text`)\r\n    );\r\n  };\r\n  return (\r\n    <div>\r\n      {isInEditMode ? renderEditView() : renderDefaultView()}\r\n      {list && <p className=\"announcements__time\">{list.time}</p>}\r\n    </div>\r\n  );\r\n};\r\nexport default TextBlock;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { getList } from \"./helpers/api\"\r\n\r\nimport \"./index.css\";\r\nimport SidebarList from \"./components/Sidebar/SidebarList\";\r\nimport TitleBlock from \"./components/AppContent/TitleBlock\";\r\nimport TextBlock from \"./components/AppContent/TextBlock\"\r\n\r\n\r\nfunction App() {\r\n  const [lists, setLists] = useState([]);\r\n  useEffect(() => {\r\n    getList().then(({ data }) => {\r\n      setLists(data);\r\n    });\r\n  }, [lists]);\r\n  const onEditListTitle = (id, title) => {\r\n    const newList = lists.map((item) => {\r\n      if (item.id === id) {\r\n        item.name = title;\r\n      }\r\n      return item;\r\n    });\r\n    setLists(newList);  \r\n  };\r\n  const [activeItem, setActiveItem] = useState(null);\r\n  return (\r\n    <div className=\"app\">\r\n      <div className=\"app__sidebar\">\r\n        <SidebarList\r\n          lists={lists}\r\n          setLists={setLists}\r\n          onClickItem={(item) => {\r\n            setActiveItem(item);\r\n          }}\r\n          activeItem={activeItem}\r\n        />\r\n      </div>\r\n      {lists && activeItem && (\r\n        <div className=\"app__content\">\r\n        <TitleBlock list={activeItem} onEditTitle={onEditListTitle}/>\r\n        <TextBlock list={activeItem}/>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA;\r\n"],"sourceRoot":""}